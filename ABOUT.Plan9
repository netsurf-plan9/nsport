###############################
ABOUT THE PLAN9 PORT OF NETSURF
###############################


REPOSITORIES

The Plan 9 port of Netsurf currently contains of the
umbrella respository 'nsport' and the following repos
from upstream Netsurf:

libcss
libdom
libhubbub
libnsbmp
libnsfb
libnsgif
libnslog
libnspsl
libnsutils
libparserutils
libutf8proc
libwapcaplet
netsurf

There are a couple of other repos (libpencil, librosprite,
librufl, libsvgtiny, nsgenbind) included from upstream Netsurf
that are not currently used in the Plan 9 netsurf build.

The 'nsport' repo contains a script 'fetch' that will clone
all needed repos required compile the Plan 9 Netsurf port. See
README.Plan9 for a quick instruction on how to clone and compile
everything.



BUILDING AND INSTALLING

There are Plan 9 mkfile's in the the 'src' directories
of all support libraries, as well as in browser directory.
There is also an umbrella mkfile in the top directory
(in the repo 'nsport') that will build all support libraries
and then the browser itself, just by issuing a single 'mk'.

After building all libraries and the browser, it is possible
to install the browser in the system, which is done from
the 'netsurf' directory. Installing will copy the browser
binary (8.nsfb for the 386 architecture) to /$objtype/bin
(e.g. /386/bin/nsfb) and will also create a folder
/sys/lib/netsurf and put runtime files (web pages, css-files,
fonts etc.) in that folder. The installed files are taken from
the folder netsurf/9res, which is a compilation of files
from 'netsurf/resources' and 'netsurf/frontends/framebuffer/res'.

Compiling the project will generate a lot of object files
(i.e. filename.8), libararies (i.e. filename.8.a) and the
executable (8.nsfb). If compiling for another architecture
the '8' will be another number/letter.

Note that both the building and cleaning only works on
the set $objtype. To build/clean for multiple architectures,
reapeat with different $objtype.


DIRECTORIES

libxxxxxx/

Support libraries that are more or less parts of Netsurf.
You will find their version numbers in their Makefile files.

The Gmake makefiles (Makefile) are not used in the
build process on Plan 9. Nor are test-suits included
in the build at this time. All files contained in the
upstream source are kept, even if they are not used in
the Plan 9 build at the moment.

Generally, 'mkfiles' and README.Plan9 files are found
in 'src' diretories in each library. There are fewer
'mkfile' than the original Makefile:s. Object files and
library files are built in the same directory as their
source, and not moved around during the build process.
In the final linking of the browser, the compiled libraries
(*.8.a) will be loaded from each library directory
respectively.

Note that the mkfile's are kept simple and don't fully
represent all possible dependencies between files,
especially regarding header files and between libraries.
If you update a file in a library, you are expected to
rebuild at least that library before rebuilding the browser.

The Plan9 framebuffer driver is found in the file
'libnsfb/src/surface/plan9.c', and its tests in 'libnsfb/test'.

netsurf/

Main directory of the browser. The executable will be here after
building. Also contains the 'mkfile' for installing the browser
in the system.

posix/

Extra posix functions not in APE (The Ansi/Posix Environment)
of Plan 9. Also some other files, not part of the netsurf source,
that needed to go somewhere. This directory might go away in
the future, if functions are incorporated into upstream APE.

Some files (e.g. XXX.inc and YYY.inc) are in the original
generated by perl scripts during the build process.
To avoid a depency on perl, these are copied in their
generated form, and have to be manually updated if needed.
The same goes for some gen_* files that are the output of
flex/bison, that was not compatible with lex/yacc.


RUNNING

If you don't want (or have permissions) to install outside
your home/build directory, it is possible to run the script
'prepns' in the netsurf directory, which will bind the runtime
resources in the process' namespace only, after which it is
possible to run the executable (e.g. 8.nsfb) from the netsurf
directory directly.
 
The installed browser executable is called 'nsfb' and expects
its runtime to be in /sys/lib/netsurf. In order to access
resources over the network, you must have 'webfs' running before
you start the browser.

To access files in the file system, you have to use
absolute paths such as "file:///usr/glenda/file.html".

The browser currently emits some debug messages both
on stdout and stderr, why you might want to direct
them to /dev/null or to another window (see the script
'netsurf/run' for examples). It is possible to view even more
debug information from the browser by running it with
the verbose option (-v).

To quit the browser, click on the big "X" in the upper
right corner, or issue a "kill *.nsfb | rc" in another
rio window.


SOME NOTES FOR FURTHER DEVELOPMENTS

Currently the netsurf port does not rely on other libraries
than present in a default 9front install. Possible libraries
to be included (e.g. from /sys/ports) are:

libcurl, libexpat, libjpeg

The source have a number of conditional 'WITH_*' controlling
the inclusion of certain, non mandatory, components. These are
the WITH_ references found in the source:

WITH_CURL
WITH_NSLOG
WITH_PDF_EXPORT
WITH_THEME_INSTALL
WITH_NSPSL
WITH_AMISSL
WITH_NSPSL
WITH_BMP
WITH_GIF
WITH_BMP
WITH_JPEG
WITH_PNG
WITH_NSSPRITE
WITH_NS_SVG
WITH_RSVG
WITH_WEBP
WITH_CURL
WITH_NSPSL
WITH_AMISSL
WITH_NSPSL

The upstream build system checks if the system, in which it is
compiled, have certain feautures present by using 'HAVE_*'
definitions. The following HAVE-definitions might be interesting 
for the port:

HAVE_INETATON
HAVE_INETPTON
HAVE_MMAP
HAVE_REALPATH
HAVE_SCANDIR
HAVE_SIGPIPE
HAVE_STRCASESTR
HAVE_STRCHRNUL
HAVE_STRFTIME
HAVE_STRNDUP
HAVE_STRPTIME
HAVE_UTSNAME
HAVE_VA_COPY
HAVE___VA_COPY
HAVE_INTPTR_T

###############################
